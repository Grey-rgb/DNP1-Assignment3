@page "/CreatePosts"
@using System.Security.Claims
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostsService postsService
@inject IUserService userService
<PageTitle>PostCreation</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Create new post</h1>

        <h4>Title:</h4>
        <input Id="title" @bind="currentTitleValue">
        <br/>
        
        <h4>Body: </h4>
        <input Id="body" @bind="currentBodyValue">
        <br/>

        <button Id="postCreateBtn" class="btn btn-primary" @onclick="CreatePost"> Create Post</button>
    </Authorized>
    
    <NotAuthorized>
        <p>Not authorized to access</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string currentTitleValue { get; set; }
    private string currentBodyValue { get; set; }


    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name!;
        
        Console.WriteLine(name);
    }

    private async Task CreatePost()
    {
        msg = "";

        if (string.IsNullOrEmpty(currentTitleValue))
        {
            msg = "Title cannot be empty";
            return;
        }
        if (string.IsNullOrEmpty(currentBodyValue))
        {
            msg = "Body cannot be empty";
            return;
        }

        try
        {
            UserBasicDTO user = await userService.GetUserByName(name);

            int userId = user.UserId;
            string userName = user.Username;
            
            PostCreationDTO dto = new(userId, currentTitleValue, currentBodyValue, new User()
            {
                UserID = userId,
                UserName = userName
            });
            await postsService.CreateAsync(dto);

            msg = "Post created successfully";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        
        //Clears the values in the textboxes
        currentTitleValue = null;
        currentBodyValue = null;
    }
}