@page "/ViewPosts"
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostsService postService
@inject NavigationManager navMgr

<PageTitle>View all posts</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Posts</h1>

        @if (posts == null)
        {
        }
        else if (!posts.Any())
        {
            <p>No Posts to display</p>
        }
        else
        {
            <table class="content-table">
                <thead>
                <tr>
                    <th>Title</th>
                    <th>User</th>
                    <th>Display Post</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in posts)
                {
                    <tr>
                        <td class="title-table-data">@item.title</td>
                        <td class="username-table-data">@item.user.UserName</td>
                        <td class="button-table-data">
                            <button class="btn btn-success" @onclick="@(() => navMgr.NavigateTo($"/ViewSinglePost/{item.id}"))">View full post</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
    </Authorized>
    <NotAuthorized>
        <p>You have to log in to access this feature</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<Post>? posts;
    private string msg = "";
    private bool doShowFilters = false;
    
    private string? usernameFilter;
    private int? userIdFilter;
    private string? completedStatusFilter;
    private string? titleContainsFilter;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await postService.GetAllAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}