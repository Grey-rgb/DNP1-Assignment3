@page "/ViewSinglePost/{id:int}"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IPostsService postsService
@inject NavigationManager navMgr

<AuthorizeView>
    <Authorized>
        @if (dto == null)
        {
            <label>Loading post data</label>
        }
        else
        {
            <div class="title-field">
                <h2>Title: @dto.title</h2>
            </div>
            <br/>
            <div class="user-field">
                <h4>User: @dto.user.UserName</h4>
            </div>
            <br/>
            <h4>Body:</h4>
            <div class="body-field">
                <p>@dto.body</p>
            </div>
            <br/>
            <div class="go-back-button-field">
                <button @onclick="@(() => navMgr.NavigateTo($"/ViewPosts"))"> Go back to all posts</button>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
    </Authorized>
    <NotAuthorized>
        <p>You have to log in to access this feature</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }

    private string msg = "";
    private PostViewDTO dto = null!;

    protected override async Task OnInitializedAsync()
    {
        msg = "";

        try
        {
            PostViewDTO postData = await postsService.GetByIdAsync(Id);

            Console.WriteLine($"Postdata: Id = {postData.Id} Body = {postData.body} Title = {postData.title} User name = {postData.user.UserName}");

            dto = new PostViewDTO(Id)
            {
                title = postData.title,
                body = postData.body,
                user = postData.user
            };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}